//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.1.1+g046e9eb0a2
//       
//       Command:
//           LottieGen -Language CSharp -Public -WinUIVersion 2.4 -InputFile SparkleLottie.json
//       
//       Input file:
//           SparkleLottie.json (10735 bytes created 13:33-07:00 Apr 8 2023)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |    86 |
// |--------------------------+-------|
// | Expression animators     |     6 |
// | KeyFrame animators       |     6 |
// | Reference parameters     |     6 |
// | Expression operations    |     0 |
// |--------------------------+-------|
// | Animated brushes         |     - |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     2 |
// | PathKeyFrameAnimations   |     - |
// |--------------------------+-------|
// | ContainerVisuals         |     1 |
// | ShapeVisuals             |     1 |
// |--------------------------+-------|
// | ContainerShapes          |     3 |
// | CompositionSpriteShapes  |     7 |
// |--------------------------+-------|
// | Brushes                  |     3 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
using Microsoft.Graphics.Canvas.Geometry;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.Graphics;
using Windows.UI;
using Windows.UI.Composition;

namespace AnimatedVisuals
{
    // Name:        emojis 2
    // Frame rate:  60 fps
    // Frame count: 188
    // Duration:    3133.3 mS
    sealed class SparkleLottie
        : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
    {
        // Animation duration: 3.133 seconds.
        internal const long c_durationTicks = 31333333;

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;

            if (SparkleLottie_AnimatedVisual.IsRuntimeCompatible())
            {
                var res = 
                    new SparkleLottie_AnimatedVisual(
                        compositor
                        );
                    return res;
            }

            return null;
        }

        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 188d;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 60d;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 188d;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new Dictionary<string, double>
            {
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        sealed class SparkleLottie_AnimatedVisual : Microsoft.UI.Xaml.Controls.IAnimatedVisual
        {
            const long c_durationTicks = 31333333;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            CompositionColorBrush _colorBrush_AlmostGold_FFFDD835;
            CompositionColorBrush _colorBrush_AlmostKhaki_FFFFEE58;
            CompositionColorBrush _colorBrush_AlmostOrange_FFF4B300;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            ExpressionAnimation _rootProgress;
            ExpressionAnimation _rootProgressRemapped;
            ScalarKeyFrameAnimation _scalarAnimation_0_to_1_0;
            ScalarKeyFrameAnimation _scalarAnimation_0_to_1_1;
            ScalarKeyFrameAnimation _scalarAnimation_0_to_1p2;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;

            static void StartProgressBoundAnimation(
                CompositionObject target,
                string animatedPropertyName,
                CompositionAnimation animation,
                ExpressionAnimation controllerProgressExpression)
            {
                target.StartAnimation(animatedPropertyName, animation);
                var controller = target.TryGetAnimationController(animatedPropertyName);
                controller.Pause();
                controller.StartAnimation("Progress", controllerProgressExpression);
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix, CompositionBrush fillBrush)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                result.FillBrush = fillBrush;
                return result;
            }

            // - - - - Layer aggregator
            // - - ShapeGroup: Group 7 Offset:<418.508, 306.156>
            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(126.602997F, -40.7879982F));
                    builder.AddCubicBezier(new Vector2(96.8199997F, -53.5830002F), new Vector2(73.9710007F, -78.5350037F), new Vector2(63.8540001F, -109.330002F));
                    builder.AddCubicBezier(new Vector2(45.4599991F, -165.319F), new Vector2(16.9589996F, -254.641006F), new Vector2(8.25399971F, -296.207001F));
                    builder.AddCubicBezier(new Vector2(6.22300005F, -305.904999F), new Vector2(-6.22300005F, -305.904999F), new Vector2(-8.25399971F, -296.207001F));
                    builder.AddCubicBezier(new Vector2(-16.9599991F, -254.641006F), new Vector2(-45.4589996F, -165.319F), new Vector2(-63.8530006F, -109.330002F));
                    builder.AddCubicBezier(new Vector2(-73.9690018F, -78.5350037F), new Vector2(-96.8199997F, -53.5830002F), new Vector2(-126.602997F, -40.7879982F));
                    builder.AddCubicBezier(new Vector2(-149.867996F, -30.7929993F), new Vector2(-184.854996F, -18.9330006F), new Vector2(-207.214005F, -10.1499996F));
                    builder.AddCubicBezier(new Vector2(-213.873001F, -7.53399992F), new Vector2(-213.964996F, 1.85000002F), new Vector2(-207.363007F, 4.6079998F));
                    builder.AddCubicBezier(new Vector2(-184.309998F, 14.2390003F), new Vector2(-147.518997F, 27.8400002F), new Vector2(-123.419998F, 39.0960007F));
                    builder.AddCubicBezier(new Vector2(-95.0289993F, 52.3569984F), new Vector2(-73.4169998F, 76.7969971F), new Vector2(-63.7700005F, 106.609001F));
                    builder.AddCubicBezier(new Vector2(-45.6539993F, 162.593994F), new Vector2(-16.9820004F, 253.766998F), new Vector2(-8.25899982F, 296.160004F));
                    builder.AddCubicBezier(new Vector2(-6.25400019F, 305.906006F), new Vector2(6.25400019F, 305.906006F), new Vector2(8.25899982F, 296.160004F));
                    builder.AddCubicBezier(new Vector2(16.9820004F, 253.766998F), new Vector2(45.6539993F, 162.593994F), new Vector2(63.7700005F, 106.609001F));
                    builder.AddCubicBezier(new Vector2(73.4160004F, 76.7969971F), new Vector2(95.0279999F, 52.3569984F), new Vector2(123.418999F, 39.0960007F));
                    builder.AddCubicBezier(new Vector2(147.518005F, 27.8400002F), new Vector2(184.307999F, 14.2390003F), new Vector2(207.362F, 4.6079998F));
                    builder.AddCubicBezier(new Vector2(213.964005F, 1.85000002F), new Vector2(213.873993F, -7.53399992F), new Vector2(207.212997F, -10.1499996F));
                    builder.AddCubicBezier(new Vector2(184.854004F, -18.9330006F), new Vector2(149.867996F, -30.7929993F), new Vector2(126.602997F, -40.7879982F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - ShapeGroup: Group 6 Offset:<517.646, 460.055>
            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(24.2810001F, -114.803001F));
                    builder.AddCubicBezier(new Vector2(42.9580002F, -123.527F), new Vector2(69.2559967F, -133.658005F), new Vector2(90.8779984F, -142.259995F));
                    builder.AddCubicBezier(new Vector2(90.875F, -142.259995F), new Vector2(-8.49400043F, -135.410004F), new Vector2(-46.9770012F, -94.3639984F));
                    builder.AddCubicBezier(new Vector2(-85.4580002F, -53.3160019F), new Vector2(-90.8789978F, 142.259995F), new Vector2(-90.8789978F, 142.259995F));
                    builder.AddCubicBezier(new Vector2(-82.1569977F, 99.8669968F), new Vector2(-53.4860001F, 8.69499969F), new Vector2(-35.3689995F, -47.2890015F));
                    builder.AddCubicBezier(new Vector2(-25.7229996F, -77.1019974F), new Vector2(-4.11000013F, -101.542F), new Vector2(24.2810001F, -114.803001F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - ShapeGroup: Group 5 Offset:<526.241, 152.977>
            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-44.026001F, 102.398003F));
                    builder.AddCubicBezier(new Vector2(-6.82600021F, 122.921997F), new Vector2(99.4789963F, 143.029007F), new Vector2(99.4789963F, 143.029007F));
                    builder.AddCubicBezier(new Vector2(77.1190033F, 134.246002F), new Vector2(42.1339989F, 122.386002F), new Vector2(18.8700008F, 112.390999F));
                    builder.AddCubicBezier(new Vector2(-10.9139996F, 99.5960007F), new Vector2(-33.762001F, 74.6439972F), new Vector2(-43.8800011F, 43.8479996F));
                    builder.AddCubicBezier(new Vector2(-62.2729988F, -12.1409998F), new Vector2(-90.7740021F, -101.462997F), new Vector2(-99.4789963F, -143.029007F));
                    builder.AddCubicBezier(new Vector2(-99.4789963F, -143.029007F), new Vector2(-81.2249985F, 81.8740005F), new Vector2(-44.026001F, 102.398003F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - ShapeGroup: Group 3 Offset:<118.345, 447.736>
            CanvasGeometry Geometry_3()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(69.8769989F, -19.7189999F));
                    builder.AddCubicBezier(new Vector2(53.4389992F, -25.9050007F), new Vector2(40.8269997F, -37.9679985F), new Vector2(35.243F, -52.855999F));
                    builder.AddCubicBezier(new Vector2(25.0909996F, -79.9229965F), new Vector2(9.35999966F, -123.106003F), new Vector2(4.55600023F, -143.201004F));
                    builder.AddCubicBezier(new Vector2(3.43499994F, -147.889999F), new Vector2(-3.43499994F, -147.889999F), new Vector2(-4.55600023F, -143.201004F));
                    builder.AddCubicBezier(new Vector2(-9.35999966F, -123.106003F), new Vector2(-25.0909996F, -79.9229965F), new Vector2(-35.243F, -52.855999F));
                    builder.AddCubicBezier(new Vector2(-40.8269997F, -37.9679985F), new Vector2(-53.4379997F, -25.9050007F), new Vector2(-69.8759995F, -19.7189999F));
                    builder.AddCubicBezier(new Vector2(-82.7170029F, -14.8870001F), new Vector2(-102.028F, -9.15299988F), new Vector2(-114.369003F, -4.90600014F));
                    builder.AddCubicBezier(new Vector2(-118.043999F, -3.64199996F), new Vector2(-118.095001F, 0.893999994F), new Vector2(-114.450996F, 2.22799993F));
                    builder.AddCubicBezier(new Vector2(-101.726997F, 6.88500023F), new Vector2(-81.4199982F, 13.46F), new Vector2(-68.1200027F, 18.9020004F));
                    builder.AddCubicBezier(new Vector2(-52.4500008F, 25.3120003F), new Vector2(-40.5209999F, 37.1269989F), new Vector2(-35.1959991F, 51.5400009F));
                    builder.AddCubicBezier(new Vector2(-25.198F, 78.6050034F), new Vector2(-9.37300014F, 122.682999F), new Vector2(-4.55900002F, 143.177994F));
                    builder.AddCubicBezier(new Vector2(-3.4519999F, 147.889999F), new Vector2(3.45300007F, 147.889999F), new Vector2(4.55900002F, 143.177994F));
                    builder.AddCubicBezier(new Vector2(9.37300014F, 122.682999F), new Vector2(25.198F, 78.6050034F), new Vector2(35.1969986F, 51.5400009F));
                    builder.AddCubicBezier(new Vector2(40.5219994F, 37.1269989F), new Vector2(52.4500008F, 25.3120003F), new Vector2(68.1200027F, 18.9020004F));
                    builder.AddCubicBezier(new Vector2(81.4209976F, 13.46F), new Vector2(101.726997F, 6.88500023F), new Vector2(114.450996F, 2.22799993F));
                    builder.AddCubicBezier(new Vector2(118.095001F, 0.893999994F), new Vector2(118.043999F, -3.64199996F), new Vector2(114.369003F, -4.90600014F));
                    builder.AddCubicBezier(new Vector2(102.028F, -9.15299988F), new Vector2(82.7180023F, -14.8870001F), new Vector2(69.8769989F, -19.7189999F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - ShapeGroup: Group 2 Offset:<177.669, 373.682>
            CanvasGeometry Geometry_4()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-24.243F, 49.5040016F));
                    builder.AddCubicBezier(new Vector2(-3.75900006F, 59.4269981F), new Vector2(54.7789993F, 69.1470032F), new Vector2(54.7789993F, 69.1470032F));
                    builder.AddCubicBezier(new Vector2(42.4669991F, 64.9000015F), new Vector2(23.2019997F, 59.1669998F), new Vector2(10.3909998F, 54.3349991F));
                    builder.AddCubicBezier(new Vector2(-6.01000023F, 48.1500015F), new Vector2(-18.5919991F, 36.0859985F), new Vector2(-24.1620007F, 21.198F));
                    builder.AddCubicBezier(new Vector2(-34.2910004F, -5.86899996F), new Vector2(-49.9850006F, -49.0519981F), new Vector2(-54.7789993F, -69.1470032F));
                    builder.AddCubicBezier(new Vector2(-54.7789993F, -69.1470032F), new Vector2(-44.7270012F, 39.5820007F), new Vector2(-24.243F, 49.5040016F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - ShapeGroup: Group 1 Offset:<172.934, 522.139>
            CanvasGeometry Geometry_5()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(13.3730001F, -55.5009995F));
                    builder.AddCubicBezier(new Vector2(23.6599998F, -59.7200012F), new Vector2(38.1339989F, -64.6159973F), new Vector2(50.0410004F, -68.7750015F));
                    builder.AddCubicBezier(new Vector2(49.9350014F, -68.7689972F), new Vector2(-4.69500017F, -65.4449997F), new Vector2(-25.8649998F, -45.6199989F));
                    builder.AddCubicBezier(new Vector2(-47.0559998F, -25.7749996F), new Vector2(-50.0410004F, 68.7750015F), new Vector2(-50.0410004F, 68.7750015F));
                    builder.AddCubicBezier(new Vector2(-45.2369995F, 48.2799988F), new Vector2(-29.4500008F, 4.20300007F), new Vector2(-19.4750004F, -22.8619995F));
                    builder.AddCubicBezier(new Vector2(-14.1630001F, -37.2750015F), new Vector2(-2.25999999F, -49.0909996F), new Vector2(13.3730001F, -55.5009995F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - ShapeGroup: Group 4 Offset:<216.689, 114.546>
            CanvasGeometry Geometry_6()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(47.7299995F, -13.4689999F));
                    builder.AddCubicBezier(new Vector2(36.5009995F, -17.6940002F), new Vector2(27.8859997F, -25.934F), new Vector2(24.0720005F, -36.1030006F));
                    builder.AddCubicBezier(new Vector2(17.1380005F, -54.5919991F), new Vector2(6.39300013F, -84.0879974F), new Vector2(3.11100006F, -97.814003F));
                    builder.AddCubicBezier(new Vector2(2.34500003F, -101.016998F), new Vector2(-2.34599996F, -101.016998F), new Vector2(-3.11100006F, -97.814003F));
                    builder.AddCubicBezier(new Vector2(-6.39300013F, -84.0879974F), new Vector2(-17.1389999F, -54.5919991F), new Vector2(-24.0739994F, -36.1030006F));
                    builder.AddCubicBezier(new Vector2(-27.8880005F, -25.934F), new Vector2(-36.5019989F, -17.6940002F), new Vector2(-47.7299995F, -13.4689999F));
                    builder.AddCubicBezier(new Vector2(-56.5009995F, -10.1680002F), new Vector2(-69.6900024F, -6.25199986F), new Vector2(-78.1200027F, -3.352F));
                    builder.AddCubicBezier(new Vector2(-80.6309967F, -2.48799992F), new Vector2(-80.6650009F, 0.610000014F), new Vector2(-78.1760025F, 1.52100003F));
                    builder.AddCubicBezier(new Vector2(-69.4850006F, 4.70200014F), new Vector2(-55.6150017F, 9.19299984F), new Vector2(-46.5289993F, 12.9099998F));
                    builder.AddCubicBezier(new Vector2(-35.8260002F, 17.2889996F), new Vector2(-27.6790009F, 25.3600006F), new Vector2(-24.0419998F, 35.2050018F));
                    builder.AddCubicBezier(new Vector2(-17.2119999F, 53.6920013F), new Vector2(-6.40299988F, 83.7990036F), new Vector2(-3.11500001F, 97.7979965F));
                    builder.AddCubicBezier(new Vector2(-2.35899997F, 101.016998F), new Vector2(2.35700011F, 101.016998F), new Vector2(3.11299992F, 97.7979965F));
                    builder.AddCubicBezier(new Vector2(6.40100002F, 83.7990036F), new Vector2(17.2110004F, 53.6920013F), new Vector2(24.0410004F, 35.2050018F));
                    builder.AddCubicBezier(new Vector2(27.6779995F, 25.3600006F), new Vector2(35.8269997F, 17.2889996F), new Vector2(46.5299988F, 12.9099998F));
                    builder.AddCubicBezier(new Vector2(55.6150017F, 9.19299984F), new Vector2(69.4840012F, 4.70200014F), new Vector2(78.1760025F, 1.52100003F));
                    builder.AddCubicBezier(new Vector2(80.6650009F, 0.610000014F), new Vector2(80.6309967F, -2.48799992F), new Vector2(78.1210022F, -3.352F));
                    builder.AddCubicBezier(new Vector2(69.6910019F, -6.25199986F), new Vector2(56.5009995F, -10.1680002F), new Vector2(47.7299995F, -13.4689999F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CompositionColorBrush ColorBrush_AlmostGold_FFFDD835()
            {
                return _colorBrush_AlmostGold_FFFDD835 = _c.CreateColorBrush(Color.FromArgb(0xFF, 0xFD, 0xD8, 0x35));
            }

            CompositionColorBrush ColorBrush_AlmostKhaki_FFFFEE58()
            {
                return _colorBrush_AlmostKhaki_FFFFEE58 = _c.CreateColorBrush(Color.FromArgb(0xFF, 0xFF, 0xEE, 0x58));
            }

            CompositionColorBrush ColorBrush_AlmostOrange_FFF4B300()
            {
                return _colorBrush_AlmostOrange_FFF4B300 = _c.CreateColorBrush(Color.FromArgb(0xFF, 0xF4, 0xB3, 0x00));
            }

            // Layer aggregator
            CompositionContainerShape ContainerShape_0()
            {
                var result = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(418.507996F, 306.149994F);
                result.Offset = new Vector2(180.15802F, 193.851013F);
                var shapes = result.Shapes;
                // ShapeGroup: Group 7 Offset:<418.508, 306.156>
                shapes.Add(SpriteShape_0());
                // ShapeGroup: Group 6 Offset:<517.646, 460.055>
                shapes.Add(SpriteShape_1());
                // ShapeGroup: Group 5 Offset:<526.241, 152.977>
                shapes.Add(SpriteShape_2());
                StartProgressBoundAnimation(result, "Scale.X", ScalarAnimation_0_to_1_0(), RootProgress());
                StartProgressBoundAnimation(result, "Scale.Y", _scalarAnimation_0_to_1_0, _rootProgress);
                return result;
            }

            // Layer aggregator
            CompositionContainerShape ContainerShape_1()
            {
                var result = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(118.345001F, 447.733002F);
                result.Offset = new Vector2(180.15799F, 193.85202F);
                var shapes = result.Shapes;
                // ShapeGroup: Group 3 Offset:<118.345, 447.736>
                shapes.Add(SpriteShape_3());
                // ShapeGroup: Group 2 Offset:<177.669, 373.682>
                shapes.Add(SpriteShape_4());
                // ShapeGroup: Group 1 Offset:<172.934, 522.139>
                shapes.Add(SpriteShape_5());
                StartProgressBoundAnimation(result, "Scale.X", ScalarAnimation_0_to_1_1(), RootProgressRemapped());
                StartProgressBoundAnimation(result, "Scale.Y", _scalarAnimation_0_to_1_1, _rootProgressRemapped);
                return result;
            }

            // Layer aggregator
            CompositionContainerShape ContainerShape_2()
            {
                var result = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(216.688995F, 114.543999F);
                result.Offset = new Vector2(180.15799F, 193.850983F);
                // ShapeGroup: Group 4 Offset:<216.689, 114.546>
                result.Shapes.Add(SpriteShape_6());
                StartProgressBoundAnimation(result, "Scale.X", ScalarAnimation_0_to_1p2(), _rootProgress);
                StartProgressBoundAnimation(result, "Scale.Y", _scalarAnimation_0_to_1p2, _rootProgress);
                return result;
            }

            // - - Layer aggregator
            // ShapeGroup: Group 7 Offset:<418.508, 306.156>
            CompositionPathGeometry PathGeometry_0()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
            }

            // - - Layer aggregator
            // ShapeGroup: Group 6 Offset:<517.646, 460.055>
            CompositionPathGeometry PathGeometry_1()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_1()));
            }

            // - - Layer aggregator
            // ShapeGroup: Group 5 Offset:<526.241, 152.977>
            CompositionPathGeometry PathGeometry_2()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_2()));
            }

            // - - Layer aggregator
            // ShapeGroup: Group 3 Offset:<118.345, 447.736>
            CompositionPathGeometry PathGeometry_3()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_3()));
            }

            // - - Layer aggregator
            // ShapeGroup: Group 2 Offset:<177.669, 373.682>
            CompositionPathGeometry PathGeometry_4()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_4()));
            }

            // - - Layer aggregator
            // ShapeGroup: Group 1 Offset:<172.934, 522.139>
            CompositionPathGeometry PathGeometry_5()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_5()));
            }

            // - - Layer aggregator
            // ShapeGroup: Group 4 Offset:<216.689, 114.546>
            CompositionPathGeometry PathGeometry_6()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_6()));
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                // Offset:<418.508, 306.156>
                var geometry = PathGeometry_0();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 418.507996F, 306.156006F), ColorBrush_AlmostGold_FFFDD835());;
                return result;
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                // Offset:<517.646, 460.055>
                var geometry = PathGeometry_1();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 517.645996F, 460.054993F), ColorBrush_AlmostOrange_FFF4B300());;
                return result;
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_2()
            {
                // Offset:<526.241, 152.977>
                var geometry = PathGeometry_2();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 526.241028F, 152.977005F), ColorBrush_AlmostKhaki_FFFFEE58());;
                return result;
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_3()
            {
                // Offset:<118.345, 447.736>
                var geometry = PathGeometry_3();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 118.345001F, 447.735992F), _colorBrush_AlmostGold_FFFDD835);;
                return result;
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_4()
            {
                // Offset:<177.669, 373.682>
                var geometry = PathGeometry_4();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 177.669006F, 373.682007F), _colorBrush_AlmostKhaki_FFFFEE58);;
                return result;
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_5()
            {
                // Offset:<172.934, 522.139>
                var geometry = PathGeometry_5();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 172.934006F, 522.138977F), _colorBrush_AlmostOrange_FFF4B300);;
                return result;
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_6()
            {
                // Offset:<216.689, 114.546>
                var geometry = PathGeometry_6();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 216.688995F, 114.545998F), _colorBrush_AlmostOrange_FFF4B300);;
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                // Layer aggregator
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.666999996F, 1F));
            }

            ExpressionAnimation RootProgress()
            {
                var result = _rootProgress = _c.CreateExpressionAnimation("_.Progress");
                result.SetReferenceParameter("_", _root);
                return result;
            }

            ExpressionAnimation RootProgressRemapped()
            {
                var result = _rootProgressRemapped = _c.CreateExpressionAnimation("_.Progress*0.9641026");
                result.SetReferenceParameter("_", _root);
                return result;
            }

            // Scale
            ScalarKeyFrameAnimation ScalarAnimation_0_to_1_0()
            {
                // Frame 0.
                var result = _scalarAnimation_0_to_1_0 = CreateScalarKeyFrameAnimation(0F, 0F, HoldThenStepEasingFunction());
                // Frame 30.
                result.InsertKeyFrame(0.159574464F, 1.53182006F, _c.CreateCubicBezierEasingFunction(new Vector2(0.665000021F, 0F), new Vector2(0.25999999F, 1F)));
                // Frame 60.
                result.InsertKeyFrame(0.319148928F, 1F, _c.CreateCubicBezierEasingFunction(new Vector2(0.640999973F, 0F), new Vector2(0.442999989F, 1F)));
                // Frame 90.
                result.InsertKeyFrame(0.478723407F, 1.22000003F, CubicBezierEasingFunction_0());
                // Frame 120.
                result.InsertKeyFrame(0.638297856F, 1F, _cubicBezierEasingFunction_0);
                // Frame 150.
                result.InsertKeyFrame(0.797872365F, 1.22000003F, _cubicBezierEasingFunction_0);
                // Frame 180.
                result.InsertKeyFrame(0.957446814F, 1F, _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0F), new Vector2(0.666999996F, 1F)));
                return result;
            }

            // Scale
            ScalarKeyFrameAnimation ScalarAnimation_0_to_1_1()
            {
                // Frame 0.
                var result = _scalarAnimation_0_to_1_1 = CreateScalarKeyFrameAnimation(0F, 0F, StepThenHoldEasingFunction());
                // Frame 14.46.
                result.InsertKeyFrame(0.0769230798F, 0F, _holdThenStepEasingFunction);
                // Frame 43.38.
                result.InsertKeyFrame(0.230769232F, 1.54999995F, _c.CreateCubicBezierEasingFunction(new Vector2(0.526000023F, 0F), new Vector2(0.171000004F, 1F)));
                // Frame 72.31.
                result.InsertKeyFrame(0.384615391F, 1F, _c.CreateCubicBezierEasingFunction(new Vector2(0.720000029F, 0F), new Vector2(0.545000017F, 1F)));
                // Frame 101.23.
                result.InsertKeyFrame(0.538461566F, 1.20000005F, _cubicBezierEasingFunction_0);
                // Frame 130.15.
                result.InsertKeyFrame(0.692307711F, 1F, _cubicBezierEasingFunction_0);
                // Frame 159.08.
                result.InsertKeyFrame(0.846153855F, 1.20000005F, _cubicBezierEasingFunction_0);
                // Frame 188.
                result.InsertKeyFrame(1F, 1F, _cubicBezierEasingFunction_0);
                return result;
            }

            // Scale
            ScalarKeyFrameAnimation ScalarAnimation_0_to_1p2()
            {
                // Frame 0.
                var result = _scalarAnimation_0_to_1p2 = CreateScalarKeyFrameAnimation(0F, 0F, _stepThenHoldEasingFunction);
                // Frame 30.
                result.InsertKeyFrame(0.159574464F, 0F, _holdThenStepEasingFunction);
                // Frame 60.
                result.InsertKeyFrame(0.319148928F, 1.5F, _c.CreateCubicBezierEasingFunction(new Vector2(0.462000012F, 0F), new Vector2(0.163000003F, 1F)));
                // Frame 90.
                result.InsertKeyFrame(0.478723407F, 1F, _c.CreateCubicBezierEasingFunction(new Vector2(0.681999981F, 0F), new Vector2(0.460999995F, 1F)));
                // Frame 120.
                result.InsertKeyFrame(0.638297856F, 1.20000005F, _cubicBezierEasingFunction_0);
                // Frame 150.
                result.InsertKeyFrame(0.797872365F, 1F, _cubicBezierEasingFunction_0);
                // Frame 180.
                result.InsertKeyFrame(0.957446814F, 1.20000005F, _cubicBezierEasingFunction_0);
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(1000F, 1000F);
                var shapes = result.Shapes;
                shapes.Add(ContainerShape_0());
                shapes.Add(ContainerShape_1());
                shapes.Add(ContainerShape_2());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            internal SparkleLottie_AnimatedVisual(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(1000F, 1000F);
            void IDisposable.Dispose() => _root?.Dispose();

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 7);
            }
        }
    }
}
